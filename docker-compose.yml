version: '3.9'
services:
  # Contenedor Zookeeper: Es un servicio de coordinación distribuida que Kafka utiliza para gestionar el clúster de brokers.
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes  # Permite conexiones sin autenticación
    ports:
      - "2181:2181"  # Puerto para comunicarse con Kafka
    networks:
      - kafka_network
    volumes:
      - zookeeper:/bitnami/zookeeper  # Persistencia de datos de Zookeeper

  # Contenedor Kafka: Es el broker que gestiona la mensajería y la transmisión de eventos en tiempo real.
  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    depends_on:
      - zookeeper  # Kafka no inicia hasta que Zookeeper esté listo
    ports:
      - "9092:9092"  # Puerto para conexiones internas
      - "29092:29092" # Puerto para conexiones externas
    environment:     
      KAFKA_BROKER_ID: 1  # Identificación del broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Conexión con Zookeeper

      # Configuración de los listeners (definen cómo Kafka acepta conexiones)
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      # - INTERNAL: Para conexiones internas dentro del contenedor
      # - EXTERNAL: Para conexiones externas fuera del contenedor

      #  Direcciones que Kafka anuncia a los clientes para conectarse
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://host.docker.interna:29092
      # - INTERNAL: Se usa dentro de la red de Docker con el nombre `kafka1`
      # - EXTERNAL: Se usa fuera de Docker con la IP de la máquina `192.168.1.21`

      #  Define qué protocolo usa cada listener (solo texto plano en este caso)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

      # Listener usado para la comunicación entre brokers
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      #  Configuración de replicación (para alta disponibilidad)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2 # Réplicas del tópico __consumer_offsets
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2       # Réplicas por defecto en nuevos tópicos
      KAFKA_MIN_INSYNC_REPLICAS: 1              # Mínimo de réplicas sincronizadas antes de aceptar un mensaje
    networks:
      - kafka_network
    volumes:
      - kafka1_data:/bitnami/kafka  # Persistencia de datos de Kafka
      
  # Contenedor Kafka2: Es el broker que gestiona la mensajería y la transmisión de eventos en tiempo real.
  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    depends_on:
      - zookeeper  # Kafka no iniciará hasta que Zookeeper esté listo
    ports:
      - "9093:9093"  # Puerto para conexiones internas
      - "29093:29093" # Puerto para conexiones externas
    environment:
      KAFKA_BROKER_ID: 2 # Identificación del broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Conexión con Zookeeper

      # Configuración de los listeners (definen cómo Kafka acepta conexiones)
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:29093
      # - INTERNAL: Para conexiones internas dentro del contenedor
      # - EXTERNAL: Para conexiones externas fuera del contenedor

      # Direcciones que Kafka anuncia a los clientes para conectarse
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://host.docker.internal:29093
      # - INTERNAL: Se usa dentro de la red de Docker con el nombre `kafka2`
      # - EXTERNAL: Se usa fuera de Docker con la IP de la máquina `192.168.1.21`

      # Define qué protocolo usa cada listener (solo texto plano en este caso)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

      # Listener usado para la comunicación entre brokers
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      # Configuración de replicación (para alta disponibilidad)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2 # Réplicas del tópico __consumer_offsets
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2       # Réplicas por defecto en nuevos tópicos
      KAFKA_MIN_INSYNC_REPLICAS: 1              # Mínimo de réplicas sincronizadas antes de aceptar un mensaje    networks:
    networks:
      - kafka_network
    volumes:
      - kafka2_data:/bitnami/kafka  # Persistencia de datos de Kafka

  # Contenedor Kafka-UI: Es una interfaz web para visualizar y gestionar Kafka.
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"  # Puerto para acceder a la interfaz web
    environment:
      KAFKA_CLUSTERS_0_NAME: local  # Nombre del clúster en la interfaz
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093  # Dirección de los broker de Kafka
    depends_on:
      - kafka1  # Espera a que Kafka esté disponible antes de iniciar
      - kafka2  # Espera a que Kafka esté disponible antes de iniciar
    networks:
      - kafka_network
    volumes:
      - kafka-ui-data:/config  # Persistencia de la configuración de la interfaz

# Red personalizada para la comunicación entre contenedores
networks:
  kafka_network:
    driver: bridge  

# Volúmenes para la persistencia de datos
volumes:
  zookeeper:
  kafka1_data:
  kafka2_data:
  kafka-ui-data:
